// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forms Form[]
  responses Response[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model Form {
  form_id     String    @id @default(cuid())
  title       String
  cover_image String  
  user_id     String
  created_at  DateTime  @default(now())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  responses   Response[]
  fields      Field[]
}

model Field {
  field_id        String      @id @default(cuid())
  form_id         String
  type            FieldType
  title           String
  required        Boolean
  image           String?
  index           Int
  text_field_type TextFieldType?
  multi_select    Boolean?
  options         Option[]
  field_responses FieldResponse[]
  text_style      TextStyle[]
  form            Form        @relation(fields: [form_id], references: [form_id], onDelete: Cascade)
}

model Option {
  option_id String @id @default(cuid())
  field_id  String
  field     Field  @relation(fields: [field_id], references: [field_id], onDelete: Cascade)
  value     String
  index    Int
}

model Response {
  response_id String @id @default(cuid())
  form_id     String
  user_id     String
  fields      FieldResponse[]
  form        Form   @relation(fields: [form_id], references: [form_id], onDelete: Cascade)
  user        User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model FieldResponse {
  field_response_id String @id @default(cuid())
  field_id          String
  response_id       String
  option_index      Int?
  text              String?
  field             Field    @relation(fields: [field_id], references: [field_id], onDelete: Cascade)
  response          Response @relation(fields: [response_id], references: [response_id], onDelete: Cascade)
}

model TextStyle {
  text_id           String @id @default(cuid())
  field_id          String
  format            FontFormat?
  size              FontSize
  field             Field    @relation(fields: [field_id], references: [field_id], onDelete: Cascade)
}

enum FieldType {
  OPTION
  TEXT
  TEXT_IMAGE
  TEXT_INPUT
  IMAGE
}

enum TextFieldType {
  TEXT
  EMAIL
  NUMBER
}

enum FontSize {
  XL
  LG
  MD
  SM
}

enum FontFormat {
  BOLD
  ITALIC
  UNDERLINE
}
